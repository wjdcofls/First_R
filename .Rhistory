3!=4
!(3==4)
k = 123
str(K)
k = 123
str(K)
k
str(K)
k1="123"
str(k1)
str(k)
k2 = (T, 123, FALSE)
k2 = ("T", 123, FALSE)
x1 = 3
x2 = "Love is Choice"
x3 = FALSE
x4 = 3 - 2i
# R 데이터의 형태
x1 = 3
x2 = "Love is Choice"
x3 = FALSE
x4 = 3 - 2i
# 데이터의 유형을 알아보자
mode(x1)
# 데이터의 유형을 알아보자
mode(x1)
mode(x2)
mode(x3)
mode(x4)
str(x4)
is.numeric(x4)
kkk=c(23, "123", FALSE)
kkk
str(kkk)
str(f1)
f1 = FALSE
str(f1)
f2 = "FALSE"
str(f2)
ss = 23:34
ss
ss1 = 23:44
ss1
ss1
ss1[c(1,3,5)]
ss1[1:21]
ss1[-22]
ss1[-21]
ss1[3:-21]
ss1[0:-21]
ss1[0:-20]
## 벡터의 연산 ##
a = c(1:3)
b = c(1:10)
apple = a + b
a
b
f = a + b
f
v1 = C(3, 10, 12)
v2 = c("kim", "lee", "jeong")
v3 = c(TRUE, FALSE, TRUE)
str(v1)
v1 = C(3,10,12)
v1 = c(1,3,5)
v2 = c(10,20,30)
v3 = c(v1, v2)
v1 = C(3,10,12)
v1 = c(1,3,5)
v3
v3
v1 = c(3,10,12)
v2 = c("kim", "lee", "jeong")
v3 = c(TRUE, FALSE, TRUE)
str(v1)
str(v2)
str(v3)
v1 = c(1,3,5)
v2 = c(10,20,30)
v3 = c(v1, v2)
v3
v3[5:6]
v3[1:-5]
v3[0:-5]
v3[0:-4]
v3[-c(1:4)]
v3[-5]
v3[-6]
install.packages(c("class", "KernSmooth", "MASS", "Matrix", "nnet"))
# 패키지 설치 for 기술통계량
install.packages("psych")
library(psych)
#기술통계량을 나타내는 명령어 describe()
describe(v3)
# : colon
v4 = -3.3 : 5
v4
v5
v5 = 5 : -3.3
v5
# 1-10까지 2씩 차이가 나게 하기
ㅍ6 = seq(from=1, to=10, by=2)
# 1-10까지 2씩 차이가 나게 하기
v6 = seq(from=1, to=10, by=2)
v6
v7 = seq(23,48,3)
v7
v8 = seq(from=5, to=1, by=0.5)
v8 = seq(from=5, to=1, by=-0.5)
v8
v9 = seq(from=1, to=5, by=0.5)
v9
sequence(5.5)
# rep() = replacement / 복사 기능 / 벡터동네에서만 쓸 수 있다.
r1 = rep("a", times=5)
r1
r2 = rep("a", each=5)
r2
r3 = rep(c("a","b"), times=3)
r3
r4 = rep(c("a","b"), each=3)
r4
r5 = rep(c("a","b"), times=3, each=2)
r5
r6 = rep(c("a","b"), times=c(10,5))
r6
r6 = rep(c("a","b"), times=c(7,5))
r6
a = c(1,2,3,4,NA,NA)
is.na(a)
table(is.na(a))
ㅁ
a
a1 = c(24, 66, 32, 1, 50)
mode(a1)  # a1은 누구네 집 자식이니?\
str(a1)
is.numeric(a1)  # a1너 혹시 수치형네 집 자식이니?
length(a1)
# names() -> 1. 너 이름이 뭐니? 2. 너 이름 이제 00이야!
names(a1)
# names() -> 1. 너 이름이 뭐니? 2. 너 이름 이제 00이야!
names(a1) = c("A","B","C","D")
names(a1)
a1[3]
a1 = c(27, 35, 47, 41)
a1[3]
str(a1)
# names() -> 1. 너 이름이 뭐니? 2. 너 이름 이제 00이야!
names(a1) = c("A","B","C","D")
names(a1)
a1[3]
str(a1)
# 벡터의 인덱싱 = 추출
weight = c(57, 81, 65, 49, 72)
weight[1]
weight[c(1,3,5)]
weight[2:5]
weight[-c(1,2,4)]
weight
weight[2] = 100
weight
weight1 = c(57, 81, 65, 49, 72, NA)
sum(weight1)
describe(weight1)
mean(weight1)
center = weight[-6]
mean(center)
center2 = mean(center)
weight[6] = center2
weight1[6] = center2
weight1
describe(weight1)
b1 = 1:3
b2 = 1:10
b1 + b2
ab = ("a", "b", "c")
ab = ("a", "b", "c")
mode(ab)
ab = (1,2,3)
ab = c("a", "b", "c")
mode(ab)
# factor -> 범주형 데이터
# 명목형 데이터는 factor
# 순서형 데이터는 ordered = TRUE
gender = c ("m","f","f","m","f","f")
gender
gender_factor = factor(gender)
gender_factor
sdtr(gender)
str(gender)
str(gender_factor)
levels(gender_factor)
gender_factor2= factor(gender, levels=c("m", "f"), labels=c("남자","여자"))
gender_factor2
str(gender_factor2)
gen3 = factor(gender)
gen3 = factor(gender, ordered = TRUE)
gen3
str(gen3)
#행렬
#rbind() = row + bind()
#cbind() = column + bind()
#matrix() = rbind() + cbind()
v1 = 1:3
v1
v2 = 4:5
v2
v2 = 4:6
v2
rbind(v1, v2)
m1 = rbind(v1, v2)
m1
m2 = cbind(v1, v2)
m2
m2[3,2] =100
m2
m2[3,2] = 100
m2
m2[1,]
# matrix 만들기
m3 = matrix(1:4, nrow = 2, ncol = 2)
m3
m4 = matrix(1:4, nrow = 2, ncol = 2, byrow = TRUE)
m4
# array -> 3차원 이상에서
a1 = array(1:10, dim=10)
a2= array(1:10, dim=c(2,5))
a3 = array(1:10, dim=c(3, 3,4))
a1
a2
a3
a3[1,,1]
a3[3,3,4]
a3[3,3,4] = 100
a3[3,3,4]
# 리스트
v1 = 1:5
m1 = matrix(1:6, nrow =2, ncol =3)
v1
m1
d1 = list(v1,m1)
d1
d1[[2]],[23]
d1[[2],[23]]
d1[[23][2]]
d1[[23],[2]]
d1[[23],2]
d1[[1]]
d1[[2]]
d1[[[2]],[2,3]]
d1[[2]],[2,3]
d1[[2]],[2,3]=100
d1[[2]][2,3]
d1[[2]][2,3]=100
d1
d1[[1]][1]
d1[[1]][1] = 100
d1[[1]]
# 리스트
v1 = 1:5
m1 = matrix(1:6, nrow =2, ncol =3)
d1
d1[[1]][1]=1
d1[[1]][6]=100
d1[[1]]
# 데이터 프레임
# 만들때 data.frame()함수 사용
id= 1:5
age = c(29, 32, 47, 35, 23)
gender = c("f", "m", "m", "f", "f")
DF1 = data.frame(id, age, gender, height)
height = c(163, 177, 172, 157, 169)
DF1 = data.frame(id, age, gender, height)
DF1
DF2 = data.frame(id,age,gender,height, stringsAsFactors = FALSE)
DF3 = data.frame(id,age,gender,height, stringsAsFactors = TRUE)
DF2
DF3
str(DF1)
View(DF1)
View(DF1)
str(DF3)
str(DF2)
# 구하는 값이 뭐니? 그리고 주어진 값은 뭐니?
# http://jupiter.hallym.ac.kr/ftpdata/data/bmi.txt\
# 분석의 목적 : 다이어트 프로그램의 유무
# 분석 프로세스
# 1) 데이터 수집
#   read.table()
kkk = read.table(url("http://jupiter.hallym.ac.kr/ftpdata/data/bmi.txt"),col.names=c("키(height)", "몸(weight)", "출생(year)", "종교(religion)", "성별(gender)", "결혼(marriage)"))
View(kkk)
# 2) 데이터 전처리
# 파생변수 (=데이터 마이닝) 만들기
kkk$키몸 = kkk$키 + kkk$몸
View(kkk)
# 2) 데이터 전처리
# 파생변수 (=데이터 마이닝) 만들기
kkk$키+몸 = kkk$키 + kkk$몸
View(kkk)
# ▼BMI 지수 만들기기
BMI$bmi = BMI$몸(weight)/(BMI$키(height)/100)^2
# ▼BMI 지수 만들기기
kkk$bmi = kkk$몸(weight)/(kkk$키(height)/100)^2
# ▼BMI 지수 만들기기
kkk$bmi = kkk$몸/(kkk$키/100)^2
# 1) 데이터 수집
#   read.table()
kkk = read.table(url("http://jupiter.hallym.ac.kr/ftpdata/data/bmi.txt"),col.names=c("키", "몸", "출생(year)", "종교(religion)", "성별(gender)", "결혼(marriage)"))  # 데이터가 url에 있어서 read.table(url(주소))를 써줬고, 관측항목 이름이 없어서 col.names()를 써가지고 이름 만들어줌
# 2) 데이터 전처리
# 파생변수 (=데이터 마이닝 자료료) 만들기
kkk$키몸 = kkk$키 + kkk$몸
View(kkk)
# ▼BMI 지수 만들기기
kkk$bmi = kkk$몸/(kkk$키/100)^2
View(kkk)
# BMI 판정 결과 파생변수 만들어주기
install.packages(car)
library(car)
# BMI 판정 결과 파생변수 만들어주기
install.packages("car")
library(car)
kkk$판정 = recode(kkk$bmi, "lo:18.5=1; 18.5:23=2; 23:25=3; 25:30=4; 30:hi=5")
table(kkk$cbmi3)
View(kkk)
table(kkk$판정)
View(kkk)
# 1) 데이터 수집
#   read.table()
kkk = read.table(url("http://jupiter.hallym.ac.kr/ftpdata/data/bmi.txt"),col.names=c("키", "몸", "출생(year)", "종교", "성별(gender)", "결혼(marriage)"))  # 데이터가 url에 있어서 read.table(url(주소))를 써줬고, 관측항목 이름이 없어서 col.names()를 써가지고 이름 만들어줌
# 종교변수로 연습하기
kkk$종교 = factor(kkk$종교, levels=c("Bu", "C1", "C2","No"),labels=c("불교", "개신교", "가톨릭", "무교"))
View(kkk)
View(kkk)
# 1) 데이터 수집
#   read.table()
kkk = read.table(url("http://jupiter.hallym.ac.kr/ftpdata/data/bmi.txt"),col.names=c("키", "몸", "출생(year)", "종교", "성별(gender)", "결혼(marriage)"))  # 데이터가 url에 있어서 read.table(url(주소))를 써줬고, 관측항목 이름이 없어서 col.names()를 써가지고 이름 만들어줌
# 2) 데이터 전처리
# 파생변수 (=데이터 마이닝 자료) 만들기
kkk$키몸 = kkk$키 + kkk$몸
View(kkk)
# BMI 지수 만들기
kkk$bmi = kkk$몸/(kkk$키/100)^2
View(kkk)
# BMI 판정 결과 파생변수 만들어주기
install.packages("car")
install.packages("car")
library(car)
kkk$판정 = recode(kkk$bmi, "lo:18.5=1; 18.5:23=2; 23:25=3; 25:30=4; 30:hi=5")
table(kkk$판정)
# 종교(명목형=factor) 변수로 각 값에 이름주는 연습하기
kkk$종교 = factor(kkk$종교, levels=c("Bu", "C1", "C2","No"),labels=c("불교", "개신교", "가톨릭", "무교"))
View(kkk)
View(kkk)
# BMI(순서형=ordered) 판정 값에 이름 주기
kkk$판정 <- ordered(kkk$판정,levels=seq(1,5),labels=c("저체중", "정상", "과체중", "초기비만", "비만"))
View(kkk)
# 6) 빈도 구하기
table(kkk$판정)
barplot(table(kkk$판정))
barplot(table(kkk$판정),col = (1:5))
barplot(table(kkk$판정),col = (3:5))
barplot(table(kkk$판정),col = (3:4))
barplot(table(kkk$판정),col = (2:4))
barplot(table(kkk$판정),col = (2:5))
3
barplot(table(kkk$판정),col = (3:4))
# 그래프 자세히 수정하기 (팁_맨 끝 소괄호 바로 앞에 쉼표 붙여가면서 추가하기!)
barplot(table(kkk$판정),col = (3:4), main="00대학교 다이어트 현황", sub="00대학교 학생의 키와 몸무게를 바탕으로 plot을 만든 편황표", xlab = "등급", ylab = "인원(명)", ylim = C(0,140))
# 그래프 자세히 수정하기 (팁_맨 끝 소괄호 바로 앞에 쉼표 붙여가면서 추가하기!)
barplot(table(kkk$판정),col = (3:4), main="00대학교 다이어트 현황", sub="00대학교 학생의 키와 몸무게를 바탕으로 plot을 만든 편황표", xlab = "등급", ylab = "인원(명)", ylim = C(0,140))
# 그래프 자세히 수정하기 (팁_맨 끝 소괄호 바로 앞에 쉼표 붙여가면서 추가하기!)
barplot(table(kkk$판정),col = (3:4), main="00대학교 다이어트 현황", sub="00대학교 학생의 키와 몸무게를 바탕으로 plot을 만든 편황표", xlab = "등급", ylab = "인원", ylim = C(0,140))
# 그래프 자세히 수정하기 (팁_맨 끝 소괄호 바로 앞에 쉼표 붙여가면서 추가하기!)
barplot(table(kkk$판정),col = (3:4), main="00대학교 다이어트 현황")
# 그래프 자세히 수정하기 (팁_맨 끝 소괄호 바로 앞에 쉼표 붙여가면서 추가하기!)
barplot(table(kkk$판정),col = (3:4), main="00대학교 다이어트 현황", sub="00대학교 학생의 키와 몸무게를 바탕으로 plot을 만든 편황표")
# 그래프 자세히 수정하기 (팁_맨 끝 소괄호 바로 앞에 쉼표 붙여가면서 추가하기!)
barplot(table(kkk$판정),col = (3:4), main="00대학교 다이어트 현황", sub="00대학교 학생의 키와 몸무게를 바탕으로 plot을 만든 편황표", xlab = "등급", ylab = "인원")
# 그래프 자세히 수정하기 (팁_맨 끝 소괄호 바로 앞에 쉼표 붙여가면서 추가하기!)
barplot(table(kkk$판정),col = (3:4), main="00대학교 다이어트 현황", sub="00대학교 학생의 키와 몸무게를 바탕으로 plot을 만든 편황표", xlab = "등급", ylab = "인원", ylim = c(0,140))
# 파일 불러오기
air = read.csv("ari.csv", header = TRUE)
# 파일 불러오기
air = read.csv("air.csv", header = TRUE)
# 파일 불러오기
air = read.csv("air.csv", header = TRUE)
View(air)
View(air)
# 파일 불러오기
air = read.csv(("air.csv", header = TRUE), colnames=c("날짜","분류","PM10"))
# 파일 불러오기
air = read.csv("air.csv", header = TRUE, colnames=c("날짜","분류","PM10"))
# 파일 불러오기
air = read.csv("air.csv", header = TRUE, colnames=c("날짜","분류","PM10")
View(air)
# 파일 불러오기
air = read.csv("air.csv", header = TRUE, colnames=c("날짜","분류","PM10"))
View(air)
# 파일 불러오기
air = read.csv("air.csv", header = TRUE, col.names=c("날짜","분류","PM10"))
View(air)
#데이터 전처리
install.packages("car")
library(car)
install.packages("car")
install.packages("car")
View(air)
air$재분류 = recode(air$PM10, "lo:10=1; 11:20=2; 21:30=3 31:40=4 41:hi=5")
#데이터 전처리
install.packages("car")
library(car)
air$재분류 = recode(air$PM10, "lo:10=1; 11:20=2; 21:30=3 31:40=4 41:hi=5")
View(air)
air$재분류 = recode(air$PM10, "lo:10=1; 11:20=2; 21:30=3 31:40=4 41:hi=5")
air$재분류 = recode(air$PM10, "lo:10=1; 10:20=2; 20:30=3 30:40=4 40:hi=5")
air$재분류 = recode(air$PM10, "lo:10=1; 10:20=2; 20:30=3 30:40=4 40:hi=5")
air$재분류 = recode(air$PM10, "lo:10=1; 10:20=2; 20:30=3; 30:40=4; 40:hi=5")
View(air)
table(air$재분류)
#재분류(순서형=ordered) 판정 값에 이름 주기
air$재분류 = ordered(air$재분류, 1:5, labels=c("매우좋음", "좋음", "보통", "조금 안좋음", "안좋음"))
View(air)
table(air$재분류)
table(air$재분류)
# 맨 위에 라이브러리 모음 적어두기
library(ggplot2)
library(psych)
View(diamonds)
#R에서 그래프 그리기
table(air$재분류)
barplot(table(air$재분류))
barplot(table(air$재분류), col = c(1:5))
barplot(table(air$재분류), col = c(2:3))
# 230707 추가
diamonds[,2:4]
diamonds[,c(2,3,4)]
diamonds[,seq(from=2, to=10, by=2)]
# 230707 추가
View(diamonds)
diamonds[,"cut"]
diamonds[,"cut",drop=FALSE]
diamonds[,grep("^c", colnames(diamonds))]
diamonds[,grep("^c", colnames(diamonds))]
# 맨 위에 라이브러리 모음 적어두기
library(ggplot2)
library(psych)
diamonds[,grep("^c", colnames(diamonds))]
barplot(table(air$재분류), col = c(2:3))
library(car)
#그래프 자세히 표현하기
barplot(table(bmidata$판정), col=c(1:5),main = "다이어트 현황",sub = "한림대학교 학생 키와 몸무게를 바탕으로 만든 현황",xlab = "등급", ylab = "인원", ylim = c(0,140))
barplot(table(air$재분류), col = c(2:3))
#그래프 자세히 표현하기
barplot(table(bmidata$판정), col=c(1:5),main = "다이어트 현황",sub = "한림대학교 학생 키와 몸무게를 바탕으로 만든 현황",xlab = "등급", ylab = "인원", ylim = c(0,140))
#그래프 자세히 표현하기
barplot(table(kkk$판정), col=c(1:5),main = "다이어트 현황",sub = "한림대학교 학생 키와 몸무게를 바탕으로 만든 현황",xlab = "등급", ylab = "인원", ylim = c(0,140))
#그래프 자세히 표현하기
barplot(table(kkk$판정), col=c(3:4),main = "다이어트 현황",sub = "한림대학교 학생 키와 몸무게를 바탕으로 만든 현황",xlab = "등급", ylab = "인원", ylim = c(0,140))
#그래프 자세히 표현하기
barplot(table(air$재분류), col = c(2:3), main = "순천시 공기질 데이터 재분류 (PM10)")
# 1) 데이터 수집
#   read.table()
kkk = read.table(url("http://jupiter.hallym.ac.kr/ftpdata/data/bmi.txt"),
col.names=c("키", "몸", "출생(year)", "종교", "성별(gender)", "결혼(marriage)"))
# 2) 데이터 전처리
# 파생변수 (=데이터 마이닝 자료) 만들기
kkk$키몸 = kkk$키 + kkk$몸
# BMI 지수 만들기
kkk$bmi = kkk$몸/(kkk$키/100)^2
# BMI 판정 결과 파생변수 만들어주기
install.packages("car")
library(car)
kkk$판정 = recode(kkk$bmi, "lo:18.5=1; 18.5:23=2; 23:25=3; 25:30=4; 30:hi=5")
table(kkk$판정)
# 종교(명목형=factor) 변수로 각 값에 이름주는 연습하기
kkk$종교 = factor(kkk$종교, levels=c("Bu", "C1", "C2","No"),labels=c("불교", "개신교", "가톨릭", "무교"))
# BMI(순서형=ordered) 판정 값에 이름 주기
kkk$판정 <- ordered(kkk$판정,levels=seq(1,5),
labels=c("저체중", "정상", "과체중", "초기비만", "비만"))
View(kkk)
# 6) 빈도 구하기
table(kkk$판정)
barplot(table(kkk$판정))  # 그래프 나타남
barplot(table(kkk$판정),col = (3:4))  #col로 색깔 입히기
#그래프 자세히 표현하기
barplot(table(kkk$판정), col=c(3:4), main = "다이어트 현황",
sub = "순천대학교 학생 키와 몸무게를 바탕으로 만든 현황",
xlab = "등급", ylab = "인원", ylim = c(0,140))
# 파일 불러오기
air = read.csv("air.csv", header = TRUE, col.names=c("날짜","분류","PM10"))
#데이터 전처리
air$재분류 = recode(air$PM10, "lo:10=1; 10:20=2; 20:30=3; 30:40=4; 40:hi=5")
#재분류(순서형=ordered) 판정 값에 이름 주기
air$재분류 = ordered(air$재분류, 1:5,
labels=c("매우좋음", "좋음", "보통", "조금 안좋음", "안좋음"))
#R에서 그래프 그리기
table(air$재분류)
barplot(table(air$재분류))
barplot(table(air$재분류), col = c(2:3))
#그래프 자세히 표현하기
barplot(table(air$재분류), col = c(2:3), main ="순천시 공기질 데이터 재분류 (PM10)")
barplot(table(air$재분류), col = c(4:5))
#그래프 자세히 표현하기
barplot(table(air$재분류), col = c(2:3), main ="순천시 공기질 데이터 재분류 (PM10)")
#그래프 자세히 표현하기
barplot(table(air$재분류), col = c(4:5), main ="순천시 공기질 데이터 재분류 (PM10)")
#### STEP4. 모델 학습
train <- cbind.data.frame(y_TRAIN, X_TRAIN_STD) # fomular 사용을 위함
# 데이터셋 불러오기
setwd("C://r_class")  # 데이터를 불러올 Working directory를 지정하고 데이터를 불러오셔야합니다.
# 데이터셋 불러오기
setwd("C://wb")  # 데이터를 불러올 Working directory를 지정하고 데이터를 불러오셔야합니다.
